View(predALL)
combModFit <- train(diagnosis ~ ., method="gam", data=predALL)
combPred <- predict(combModFit,predALL)
combPred
sum(predict(modRF,newdata=testing)==testing$diagnosis)
sum(predict(modGBM,newdata=testing)==testing$diagnosis)
sum(predict(modLDA,newdata=testing)==testing$diagnosis)
sum(predict(combModFit,predALL)==testing$diagnosis)
63/82
65/82
63/82
66/82
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
View(training)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
library(randomForest)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("C:/Users/jopapa/Desktop/gaData.csv")
View(dat)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
View(training)
fit <- bats(testing)
View(testing)
plot(forecast(fit))
testing$y <- testing$visitsTumblr
fit <- bats(testing)
testing$y <- testing$visitsTumblr
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("C:/Users/jopapa/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit <- bats(tstrain)
plot(forecast(fit))
mod <- bats(tstrain)
acc <- accuracy(fcast, testing$visitsTumblr)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
fcast
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
acc
testing$visitsTumblr
fcast$lower
fcast$upper
fcast$lower
testing$visitsTumblr
sum(testing$visitsTumblr > fcast$lower)
sum((testing$visitsTumblr > fcast$lower) & (testing$visitsTumblr < fcast$upper))
226 / 235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
results <- c(accsvm[2], accsvmRadial[2], accsvmLinear[2], accsvmPoly[2], accsvmRadial[2], accsvmRadialCost[2])
library(e1071)
results <- c(accsvm[2], accsvmRadial[2], accsvmLinear[2], accsvmPoly[2], accsvmRadial[2], accsvmRadialCost[2])
284/462
236/462
199/317
63/82
65/82
63/82
66/82
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
199/317
284/462
63/82
65/82
63/82
66/82
install.packages('knitr', dependencies = TRUE)
library(knitr)
install.packages("plyr")
library(plyr)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
library(randomForest)
library(plyr)
set.seed(123)
setwd("C:/Users/jopapa/Documents/Coursera")
pml_training <- read.csv("pml-training.csv")
pml_testing <- read.csv("pml-testing.csv")
empty_vars <- apply(pml_testing,2, function(x)all(is.na(x)))
non_empty_vars <- names(empty_vars[empty_vars==0])
vars_to_remove <- c("problem_id","X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window")
vars_to_use <- non_empty_vars[! non_empty_vars %in% vars_to_remove]
vars_to_use <- c("classe",vars_to_use)
pml_training_redux <- pml_training[vars_to_use]
summary(pml_training_redux$classe)
vars_to_use <- c("classe",vars_to_use)
pml_training_redux <- pml_training[vars_to_use]
summary(pml_training_redux$classe)
plot(pml_training_redux$classe)
vars_to_use <- c("classe",vars_to_use)
pml_training_redux <- pml_training[vars_to_use]
summary(pml_training_redux$classe)
plot(pml_training_redux$classe, main="Frequency of Outcome Variable Classe in Training Data",xlab="Categories of Casse",ylab="Frequency")
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map
knitr::opts_chunk$set(echo = TRUE)
StarIcon <- makeIcon(iconUrl = "https://cdn3.iconfinder.com/data/icons/impossible-shapes-volume-1/512/6c.png")
StarIcon
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
require(graphics)
plot(co2, ylab = expression("Atmospheric concentration of CO"[2]),
las = 1)
title(main = "co2 data set")
require(graphics)
pairs(quakes, main = "Fiji Earthquakes, N = 1000", cex.main = 1.2, pch = ".")
plot_ly(quakes, x = ~long, y = ~lat, type = "scatter")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
plot_ly(quakes, x = ~long, y = ~lat, type = "scatter")
pairs(quakes, main = "Fiji Earthquakes, N = 1000", cex.main = 1.2, pch = ".")
plot_ly(quakes, x = ~long, y = ~lat, type = "scatter", color = ~mag)
pairs(quakes, main = "Fiji Earthquakes, N = 1000", cex.main = 1.2, pch = ".")
plot_ly(quakes, x = ~long, y = ~lat, type = "scatter", size = ~mag, color = ~depth)
library(ggplot2)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
knitr::opts_chunk$set(echo = TRUE)
data(quakes)
data(quakes)
data("quakes")
quakes$long
View(quakes)
View(quakes)
library(leaflet)
JohnLatLong <- data.frame(
lat = c(-10, -40),
lng = c(165, 190))
JohnMap <- leaflet() %>%
addTiles() %>%
addRectangles(lat1 = -10, lng1 = -40,
lat2 = 165, lng2 = 190)
JohnMap
View(quakes)
library(ggplot2)
library(plotly)
require(graphics)
data("quakes")
plot_ly(quakes, x = ~long, y = ~lat, type = "scatter", size = ~mag, color = ~depth)
View(quakes)
View(quakes)
View(quakes)
john <- quakes
names(john)
install.package(swirl)
package.install("swirl")
install.packages("swirl")
library(swirl)
shiny::runApp('Coursera/myApp/myApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
require(stats); require(graphics)
plot(height ~ age, data = Loblolly, subset = Seed == 329,
xlab = "Tree age (yr)", las = 1,
ylab = "Tree height (ft)",
main = "Loblolly data and fitted curve (Seed 329 only)")
fm1 <- nls(height ~ SSasymp(age, Asym, R0, lrc),
data = Loblolly, subset = Seed == 329)
age <- seq(0, 30, length.out = 101)
lines(age, predict(fm1, list(age = age)))
plot(height ~ age, data = Loblolly,
xlab = "Tree age (yr)", las = 1,
ylab = "Tree height (ft)",
main = "Loblolly data and fitted curve (Seed 329 only)")
require(stats); require(graphics)
pairs(trees, panel = panel.smooth, main = "trees data")
plot(Volume ~ Girth, data = trees, log = "xy")
require(graphics)
pairs(airquality, panel = panel.smooth, main = "airquality data")
model1 <- lm(ozone ~ wind, data = airquality)
model1 <- lm(airquality$ozone ~ airquality$wind, data = airquality)
require(graphics)
data(airquality)
model1 <- lm(airquality$ozone ~ airquality$wind, data = airquality)
View(airquality)
model1 <- lm(airquality$Ozone ~ airquality$Wind, data = airquality)
plot(airquality$Ozone, airquality$Wind, xlab = "Miles Per Gallon",
ylab = "Ozone", bty = "n", pch = 16)
plot(airquality$Ozone, airquality$Wind, xlab="Wind", ylab="Ozone", bty = "n", pch = 16)
plot(airquality$Ozone, airquality$Temp, xlab="Wind", ylab="Ozone", bty = "n", pch = 16)
plot(airquality$Ozone, airquality$Wind, xlab="Wind", ylab="Ozone", bty = "n", pch = 16)
model2 <- lm(airquality$Ozone ~ airquality$Temp*airquality$Temp, data = airquality)
plot(airquality$Ozone, airquality$Temp, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
TempInput <- 100
predict(model1, newdata = data.frame(Temp = TempInput))
model1 <- lm(airquality$Ozone ~ airquality$Temp, data = airquality)
TempInput <- 100
predict(model1, newdata = data.frame(Temp = TempInput))
model1
plot(airquality$Ozone, airquality$Temp, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
model1 <- lm(airquality$Ozone ~ airquality$Temp, data = airquality)
abline(model1, col = "red", lwd = 2)
model2 <- lm(airquality$Ozone ~ airquality$Temp*airquality$Temp, data = airquality)
abline(model1, col = "blue", lwd = 2)
abline(model2, col = "blue", lwd = 2)
plot(airquality$Ozone, airquality$Temp, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
require(graphics)
data(airquality)
pairs(airquality, panel = panel.smooth, main = "airquality data")
model1 <- lm(airquality$Ozone ~ airquality$Temp, data = airquality)
model2 <- lm(airquality$Ozone ~ airquality$Temp*airquality$Temp, data = airquality)
plot(airquality$Ozone, airquality$Temp, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
plot(airquality$Temp, airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
pairs(airquality, panel = panel.smooth, main = "airquality data")
model2
model2 <- lm(airquality$Ozone ~ airquality$Solar.R + airquality$Solar.R:airquality$Solar.R, data = airquality)
model2
model1 <- lm(airquality$Ozone ~ airquality$Solar.R, data = airquality)
model2 <- lm(airquality$Ozone ~ airquality$Solar.R*airquality$Solar.R, data = airquality)
plot(airquality$Solar.R, airquality$Ozone, xlab="Solar.R", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model2 <- lm(airquality$Ozone ~ airquality$Solar.R:airquality$Solar.R, data = airquality)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
pairs(airquality, panel = panel.smooth, main = "airquality data")
model1 <- lm(airquality$Temp ~ airquality$Solar.R, data = airquality)
model2 <- lm(airquality$Temp ~ airquality$Solar.R:airquality$Solar.R, data = airquality)
plot(airquality$Solar.R, airquality$Temp, xlab="Solar.R", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model1 <- lm(airquality$Temp ~ airquality$Solar.R, data = airquality)
model2 <- lm(airquality$Temp ~ I(airquality$Solar.R:airquality$Solar.R), data = airquality)
model1 <- lm(airquality$Temp ~ airquality$Solar.R, data = airquality)
model2 <- lm(airquality$Temp ~ I(airquality$Solar.R*airquality$Solar.R), data = airquality)
plot(airquality$Solar.R, airquality$Temp, xlab="Solar.R", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
plot(x=airquality$Solar.R, y=airquality$Temp, xlab="Solar.R", ylab="Ozone", bty = "n", pch = 16)
pairs(airquality, panel = panel.smooth, main = "airquality data")
plot(x=airquality$Wind, y=airquality$Ozone, xlab="Solar.R", ylab="Ozone", bty = "n", pch = 16)
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Solar.R", ylab="Ozone", bty = "n", pch = 16)
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
model1 <- lm(airquality$Ozone ~ airquality$Temp, data = airquality)
model2 <- lm(airquality$Ozone ~ airquality$Temp, data = subset(airquality, Ozone < 100))
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model1
model2
subset(airquality, Ozone < 100)
model1 <- lm(airquality$Ozone ~ airquality$Temp, data = airquality)
model2 <- lm(airquality$Ozone ~ airquality$Temp, data = subset(airquality, Ozone < 50))
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model2 <- lm(Ozone ~ Temp, data = subset(airquality, Ozone < 50))
abline(model2, col = "blue", lwd = 2)
model1 <- lm(airquality$Ozone ~ airquality$Temp, data = airquality)
model2 <- lm(Ozone ~ Temp, data = subset(airquality, Ozone < 100))
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model1 <- lm(Ozone ~ Temp, data = airquality)
model2 <- lm(Ozone ~ Temp, data = subset(airquality, Ozone < 100))
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model3 <- loess(Ozone ~ Temp, data=airquality)
abline(model3, col = "blue", lwd = 2)
model3
abline(model3, col = "green", lwd = 2)
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model3, col = "green", lwd = 2)
scatter.smooth(Ozone, y = Temp, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), data=airquality)
scatter.smooth(x=airquality$Ozone, y = airquality$Temp, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), data=airquality)
scatter.smooth(x=airquality$Temp, y = airquality$Ozone, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), data=airquality)
model1 <- lm(Ozone ~ Temp, data=airquality)
model2 <- lm(Ozone ~ Temp, data=subset(airquality, Ozone < 100))
model3 <- loess(Ozone ~ Temp, data=airquality)
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
lines(airquality$Temp, predict(model3), col = "green")
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
lines(airquality$Temp, predict(model3), col = "green")
model3
data(airquality)
model3 <- loess(Ozone ~ Temp, data=airquality)
model3
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
lines(airquality$Temp, predict(model3), col = "green")
airquality$Temp
predict(model3)
model3
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model1 <- lm(Ozone ~ Temp, data=airquality)
model2 <- lm(Ozone ~ Temp, data=subset(airquality, Ozone < 100))
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model3 <- lm(Ozone ~ I(Temp*Temp), data=airquality)
model3 <- lm(Ozone ~ I(Temp*Temp), data=airquality)
model3
model1
abline(model3, col = "green", lwd = 2)
model3
TempInput <- 100
predict(model1, newdata = data.frame(Temp = TempInput))
TempInput <- 100
predict(model3, newdata = data.frame(Temp = TempInput))
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model3, col = "green", lwd = 2)
predict(model3, newdata = data.frame(Temp = TempInput))
predict(model3, newdata = airquality)
data(airquality)
airquality$Temp_squared <- airquality$Temp*airquality$Temp
View(airquality)
model3 <- lm(Ozone ~ Temp_squared, data=airquality)
abline(model3, col = "green", lwd = 2)
model3
plot(x=airquality$Temp_squared, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model3, col = "green", lwd = 2)
data(airquality)
model1 <- lm(Ozone ~ Temp, data=airquality)
model2 <- lm(Ozone ~ Temp, data=subset(airquality, Ozone < 90))
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model1 <- lm(Ozone ~ Temp, data=airquality)
model2 <- lm(Ozone ~ Temp, data=subset(airquality, Ozone < 100))
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
max(airquality$Temp)
min(airquality$Temp)
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
pairs(airquality, panel = panel.smooth, main = "airquality data")
runApp('Coursera/JohnApp')
loess_fit <- loess(airquality$Ozone ~ airquality$Temp, airquality)
loess_fit
loess_fit <- loess(Ozone ~ Temp, airquality)
loess_fit
lines(airquality$Temp, predict(loess_fit), col = "blue")
model2lines <- predict(loess_fit, newdata = airquality)
lines(50:100, model2lines, col = "blue", lwd = 2)
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
loess_fit <- loess(Ozone ~ Temp, airquality)
lines(airquality$Temp, predict(loess_fit), col = "blue")
predict(loess_fit)
model2lines <- predict(loess_fit, newdata = airquality)
model2lines
loess_fit
model2lines
lines(model2lines, col = "blue", lwd = 2)
data(airquality)
model1 <- lm(Ozone ~ Temp, data=airquality)
model2 <- lm(Ozone ~ Temp, data=subset(airquality, Ozone < 100))
model3 <- loess(Ozone ~ Temp, airquality)
data(airquality)
model1 <- lm(Ozone ~ Temp, data=airquality)
model2 <- lm(Ozone ~ Temp, data=subset(airquality, Ozone < 100))
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
abline(model1, col = "red", lwd = 2)
abline(model2, col = "blue", lwd = 2)
model3loess <- predict(model3, newdata = airquality)
lines(model2lines, col = "green", lwd = 2)
lines(model3loess, col = "green", lwd = 2)
model3loess
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
TempInput <- 80
predict(model3loess, newdata = data.frame(Temp = TempInput))
model3loess
predict(model3, newdata = data.frame(Temp = TempInput))
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temp", ylab="Ozone", bty = "n", pch = 16)
model3 <- loess(Ozone ~ Temp, airquality)
model3loess <- predict(model3, newdata = airquality)
loess.smooth(Temp, Ozone, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), evaluation = 50, data=airquality)
loess.smooth(airquality$Temp, airquality$Ozone, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), evaluation = 50, data=airquality)
j <- loess.smooth(airquality$Temp, airquality$Ozone, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), evaluation = 50, data=airquality)
model3loess <- predict(j, newdata = airquality)
j <- loess.smooth(airquality$Temp, airquality$Ozone, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"), evaluation = 50, data=airquality)
j
lines(j, col = "green", lwd = 2)
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
runApp('Coursera/JohnApp')
shiny::runApp('Coursera/OzoneApp')
rsconnect::setAccountInfo(name='papazian', token='CF36F98975F24F34027D9D469E1F6A98', secret='pPgJxjhqKd6xekh6p/7SpCSl1ik9//wXiNY6I+R2')
library(rsconnect)
runApp('Coursera/OzoneApp')
runApp('Coursera/OzoneApp')
runApp('Coursera/OzoneApp')
runApp('Coursera/OzoneApp')
runApp('Coursera/OzoneApp')
runApp('Coursera/OzoneApp')
runApp('Coursera/OzoneApp')
require(devtools)
install_github("slidify", "ramnathv")
install.packages('devtools')
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("mydeck")
runApp('~/Coursera/OzoneApp')
